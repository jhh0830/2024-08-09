2024-08-09
 < 함수 FUNCTION>
    
   하나의 기능 단위, 자바로 따지면 메소드와 같은 존재
   전달된 값들을 읽어서 처리한 (계산한) 결과를 반환
    
   - 단일행 함수 : N 개의 값을 읽어서 N개의 결과를 리턴
                  즉, 매 행마다 함수 실행 후 매 행의 결과를 모두 리턴
   - 그룹 함수 (집계 함수) : N 개의 값을 읽어서 1 개의 결과를 리턴
                           즉, 매 행을 하나의 그룹별로 묶어서 
                           실행 후 결과를 리턴

> 단일행 함수와 그룹 함수는 함께 사용할 수 없음!!
   왜? 결과 행의 갯수가 다르기 때문
   (항상 데이터베이스의 테이블, RESULT SET 과 같은
      데이터를 나타내는 표 형식은 반듯반듯 네모 모양이여야 함!!)

-----< 단일행 함수 >----------

< 문자열과 관련된 함수 >
    
  LENGTH / LENGTHB
    
- LENGTH(STR) : 해당 전달된 문자열의 글자 수 반환
- LENGTHB (STR) : 해당 전달된 문자열의 바이트 수 반환
    
 STR : '문자열' / 문자열 타입 컬럼명
  결과값은 NUMBER 타입으로 반환
    
  숫자, 영문, 특수문자 : '!', '~', 'A', 'a', '1' 등
              한 글자당 1BYTE 로 취급
  한글 : 'ㄱ', 'ㅣ', 'ㅁ', '김' 등
       한 글자당 3BYTE 로 취급


-- DUAL : 가상테이블, DUMMY TABLE
-리터럴을 가지고 단순 연삭식 또는 함수식을 처리한 결과를
- 바로 출력해보고 싶을 때 FROM절에 기술하는 임의의 테이블명
 INSTR
    
-INSTR(STR) : 전달된 문자열로부터 특정 문자의 위치값 반환
    
    INSTR(STR, '특정문자', 찾을위치의시작값, 순번) 
    
    STR : '문자열' / 문자열 타입 컬럼명
    결과값은 NUMBER 타입으로 반환

 찾을위치의시작값
    1 : 앞에서부터 찾겠다. (생략 시 기본값)
    -1 : 뒤에서부터 찾겠다.

찾을위치 , 순번 생략 시 기본적으로 "앞에서 부터 첫번째" 글자의 위치 검색  (자바랑 다르게 여기는 1부터 셈) 
--> 찾을위치의시작값을 1로 설정해두면 "앞에서부터" 찾아줌
--> 찾을위치에 시작값을 -1로 설정해두면 "뒤에서부터" 찾아줌


SUBSTR

    - SUBSTR(STR, POSITION, LENGTH)
    : 전달된 문자열로부터 특정 문자열을 추출해서 반환
    (자바로 치면 .substring() 메소드와 유사)
    
    
    - STR : '문자열'/ 문자열 타입 컬럼명
    - POSTION : 문자열을 추출할 시작위치값
                POISTION 번째 문자부터 추출
    - LENGTH : 추출할 문자 갯수 (생략 가능)
                생략 시 끝까지 추출하겠다. 라는 의미
    결과값은  CHARACTER (문자열) 타입을 반환

-- > 함수 호출 구문안에 함수 호출 구문을 중첩해서 사용 가능

 LPAD / RPAD
    - LPAD/ RPAD(STR, 
    최적으로 반환할문자의길이(바이트),
    덧붙이고자하는문자)
    : 제시한 문자열에 임의의 문자를 왼쪽 또는 오른쪽에 덧붙여서
    최종 N 길이만큼의 문자열을 만들어서 반환
    
    - STR : '문자열' / 문자열 타입 컬럼명
    결과값은 CHARACTER 타입으로 반환
    
    덧붙이고자하는 문자는 생략 가능 (생략 시, 공백 문자가 덧붙여짐!)

 LTRIM / RTRIM
    
    - LTRIM / RTRIM(STR, 제거하고자하는문자)
    : 문자열의 왼쪽 또는 오른쪽에서 제거하고자하는 문자들을 찾아서
    제거한 나머지 문자열을 반환
    
    -STR : '문자열' / 문자열 타입 컬럼명
    결과값은 CHARACTER 타입으로 반환
    
    
    제거하고자하는문자는 생략가능
    (생략시, 공백을 제거해줌!!)

TRIM
    
    - TRIM(BOTH/LEADING/TRILING '제거하고자하는문자' FROM STR)
    : 문자열의 앞/뒤/양쪽에 있는 특정 문자를 제거한 나머지 문자열 반환
    
    - STR : '문자열' / 문자열 타입 컬럼명
    
    결과값은 CHARACTER 타입으로 변환
    
    BOTH/LEADING/TRAILING 는 생략 가능
	(생략 시, BOTH가 기본임!!) >> (양쪽제거)

-- >BOTH :  기본적으로 문자열만 제시했을 때 양쪽에 있는 공백을 제거

--> LEADING : 앞쪽만 제거(== LTRIM 함수 실행 결과와 동일)


CONCAT 
    
    - CONCAT(STR1, STR2)
    : 전달된 두 문자열을 하나로 합친 결과를 반환
    
    
    - STR1, STR2 : '문자열' / 문자열 타입 컬럼명
    결과값은 CHARACTER 타입으로 반환


REPLACE
    
    - REPLACE(STR, 찾을문자, 바꿀문자)
    : STR 로 부터 찾을 문자를 찾아서 바꿀 문자로 바꾼
    문자열을 반환
    
    - STR : '문자열' / 문자열 타입 컬럼명
    결과값은 CHARACTER 타입으로 반환


< 숫자와 관련된 함수 >
    
    ABS
    
    - ABS(NUMBER) : 절대값을 구해주는 함수

    MOD
    
    - MOD(NUMBER1, NUMBER2)
    : 두 수를 나눈 나머지 값을 반환해주는 함수
      (오라클에서는 모듈러 연산자 % 가 없음!!)

 ROUND
    
    - ROUND(NUMBER, 위치)
    : 반올림 처리해주는 함수
    
    위치 : 소숫점 아래 N 번째 수에서 반올림
          생략 가능 (생략 시, 기본값은 0)

CEIL
    
    - CEIL(NUMBER) : 소숫점 아래의 수를 무조건 올림 처리
                     (자릿수 조정 X)

FLOOR
    
    - FLOOR(NUMBER) : 소숫점 아래의 수를 무조건 버림 처리
                       (자릿수 지정 X)

TRUNC
    
    - TRUNC(NUMBER, 위치)
    : 위치 지정 가능한 버림 처리 해주는 함수
    
    위치는 생략 가능 (생략 시, 기본값은 0, 소숫점 뒤를 모두 버림처리)

< 날짜 관련 함수 >
    
  DATE 타입의 : 년, 월, 일, 시, 분, 초 를 다 포함한 자료형
    
  - SYSDATE : 현재 이 컴퓨터의 시스템 날짜 반환

 MONTHS_NETWEEN(DATE1, DATE2)
- 둘 날짜 사이의 "개월수" 반환
단, DATE1 이 더 미래의 날짜여야 한다. **양수로 뽑고싶다면 말이다

ADD_MONTHS(DATE, NUMBER)
- 특정 날짜에 해당 숫자만큼의 개월수를 더한 날짜를 반환 (DATE 타입 반환)

EXTRACT : 년도 또는 월 또는 일 정보만 추출해서 반환
              (NUMBER 타입 반환)
            
    [ 표현법 ]
    - EXTRACT(YEAR FROM DATE) : 특정 날짜로부터 년도만 추출
    - EXTRACT(MONTH FROM DATE) : 특정 날짜로부터 월만 추출
    - EXTRACT (DAY FROM DATE) : 특정 날짜로부터 일만 추출
< 형변환 함수 >
    
    NUMBER / DATE => CHARACTER
    
    - TO_CHAR(NUMBER/DATE, 포맷)
    : 숫자형 또는 날짜형 데이터를 문자형 타입으로 변환
     (CHARACTER 타입 반환)

--> L : LOCAL, 현재 설정된 나라의 화폐단위 기호

--> D : 1주일 기준 몇일째 (일요일부터 셈)

--> DD : 1달 기준 몇일째 (1일부터 셈)

--> DDD : 1년 기준 몇일째 (1월 1일부터 셈)

-->  DY : '요일' 을 뺀 형태

--> DAY : '요일' 을 붙인 형태

포맷 이외의 다른 문자가 들어갈 경우

-- "년", "월", "일" 처럼 쌍따옴표로 감싸야함!!

 NUMBER / CHARACTER => DATE
    - TO_DATE(NUMBER/CHARACTER, 포맷)
    : 숫자형 또는 문자형 데이터를 날짜형으로 변환
    (DATE 타입 반환)

-- TO_DATE 함수 호출 시 주의 사항

SELECT TO_DATE(000101)

FROM DUAL; -- 000101 (X) / 101 (0)

--> 000101 는 0으로 시작하는 숫자로 인식하여 에러 발생

SELECT TO_DATE('000101')
FROM DUAL;
--> 0으로 시작하는 년도는 반드시 문자열로 제시 해야함!!

< 날짜 포맷 사용 시 주의 할점!! >
--> TO_DATE 함수를 이용해서 DATE 형식으로 변환 시
-- 두자리 년도에 대해 YY 포맷을 적용시킬 경우
-- "무조건 현재 세기 기준" 으로 나옴

SELECT TO_DATE('140630','RRMMDD')
FROM DUAL;  
 YY>> RR 로 바꿔서 한다.

--> R : ROUND 약자 (반올림)
--> 두자리년도에 대해 RR 포맷을 지정할 경우
-- 50 이상이면 이전세기로, 50 미만이면 현제세기로 표현

CHARACTER => NUMBER
    
    -TO_NUMBER(CHARCATER, 포맷)
    : 문자형 데이터를 숫자형으로 변환
     (NUMBER 타입 변환)

-- 문자열이 숫자로 자동형변환 되긴 함!!
SELECT '123' + '123'
FROM DUAL;  결과값 : 246


< NULL 처리 함수 >


-- NVL(컬럼명, 해당컬럼값이NULL일경우반환할결과값)
-- 해당 컬럼값이 존재할 경우 기존의 컬럼값을 그대로 반환,
-- 해당 컬럼값이 NULL 일 경우에는 내가 제시한 특정값을 반환


< 선택 함수 >
    
    DECODE(비교대상컬럼명, 조건값1, 결과값1
                        , 조건값2, 결과값2
                        , 조건값3, 결과값3
                        , .......
                        , 조건값N, 결과값N
                        , 결과값)

(함수는 아님)
    CASE WHEN THEN 구문
    - DECODE 선택함수와 비교하면 DECODE 내부적으로 "동등비교"만 수행
     CASE WHEN THEN 구문으로는 특정 조건을 "디테일" 하게 제시 가능
    - 자바에서의 IF-ELSE IF문 느낌
[ 표현법 ]
 CASE WHEN 조건식1 THEN 결과값1
      WHEN 조건식2 THEN 결과값2
      ...
      WHEN 조건식N THEN 결과값N
                  ELSE 결과값
                  
    END